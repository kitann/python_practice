# THIS QUESTION WILL PROVIDE A SENTENCE AND ASK THE APPLICANT TO WRITE A CODE THAT RETURN THE CHARACTER
# THAT HAS THE MOST FREQUENCY OF OCCURENCE
# THIS CONTAIN THE SPACE AS WELL.
# SOUNDS LIKE FUN TO ME

# I WILL START BY DEFINING THE VARIABLE AND USE A FOR LOOP STATEMENT TO LOOP THROUGH THE SENTENCE
# WHEN A CHARACTER IS FOUND, IT WILL BE RETURNED IN THE FORM OF A DICTIONARY
# AT THE END OF THE PROGRAM WE WANT TO PRINT THE ONLY MOST OCCURING CHARACTER OR SPACE WE THE SITUATIONS MIGHT BE
# LET'S HAVE FUN

sentence = "Ten green bottles standing on the wall"

char_occurrence = {}

# THE FOR LOOP STATEMENT
for char in sentence:
    if char in char_occurrence:
        char_occurrence[char] += 1
    else:
        char_occurrence[char] = 1

# NOW I WILL USE THE SORTED FUNCTION/METHOD HERE TO GET THE OUTPUT SORTED FOR US BEFORE I CALL THE MOST OCCURED
# CHARACTER

# SINCE THE OUTPUT IS EXPECTED TO GENERATE KEY, VALUE PAIR AND THE VALUES ARE THE COUNTS, IT MADE SENSE TO HAVE THE
# VALUE[1] AS SHOWN BELOW
# I WILL SAVE THE OUTPUT IN A VARIABLE AND PRINT THE VALUE

char_occurrence_sorted = sorted(char_occurrence.items(),
                                key=lambda values: values[1],
                                reverse=True)
print(char_occurrence_sorted[0])

# THE OUT PUT BELOW HAS NOT BEEN SORTED, I WILL INVOKE THE REVERSE=TRUE KEYWORD IN THE SORTED LAMBA FUNCTION THERE
# I WILL PRINT AGAIN SO WE SEE THAT IT HAS BEEN SORTED BEFORE I PRINT THE HIGHEST
# SINCE THE OUTPUT IS NOW IN DESCENDING ORDER, IT MAKE SENSE TO PRINT[0] POSITION

# THE SPACE OCCURRED THE MOST, SO HERE WE GO
# THANKS FOR WATCHING!!!
# :D

